name: deploy

concurrency: prod_environment

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  run:
    name: Deploy website

    permissions:
      contents: "read"
      id-token: "write"

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10"]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      # ------------------------------------------------------------------------
      # Python - Setup

      - name: Python - Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Python - Install Poetry
        run: |
          pip install poetry==1.3
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Python - Load cached venv
        id: cached-python-env
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}-1

      - name: Python - Ensure cache is healthy
        id: cached-python-env-check
        continue-on-error: true
        if: steps.cached-python-env.outputs.cache-hit == 'true'
        run: |
          .venv/bin/activate/bin/python --version
          # poetry run python --version

      - name: Python - Debug variables
        run: |
          echo ${{ steps.cached-python-env.outputs.cache-hit }}
          echo ${{ steps.cached-python-env-check.outcome }}

      - name: Python - Install Python dependencies
        if: steps.cached-python-env.outputs.cache-hit != 'true' || steps.cached-python-env-check.outcome != 'success'
        run: |
          rm -rf .venv || true
          poetry install --no-interaction --no-root

      - name: Python - Print Python info
        run: |
          source .venv/bin/activate
          which python
          python --version
          which pip
          pip --version
          pip freeze

      # ------------------------------------------------------------------------
      # Build

      - name: Build website
        run: |
          source .venv/bin/activate
          mkdocs build

      # ------------------------------------------------------------------------
      #  Publish

      - name: Configure GCP auth
        uses: google-github-actions/auth@v1
        with:
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Upload to GCS
        uses: google-github-actions/upload-cloud-storage@v1
        with:
          path: dist
          destination: ${{ secrets.GCP_BUCKET }}
          parent: false
          headers: |-
            cache-control: no-cache

      - name: Upload to GCS (sync)
        run: gsutil rsync -r -d dist gs://${{ secrets.GCP_BUCKET }}

      - name: Configure GSC Cache
        run: |
          gsutil setmeta -r -h "Cache-Control: no-cache" gs://${{ secrets.GCP_BUCKET }}

      - name: Purge Cloudflare Cache
        uses: jakejarvis/cloudflare-purge-action@v0.3.0
        env:
          CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE }}
          CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}
